# This task file is based per cases to deal with how to verify domain. That
# name should be update-{{ cert_domain }}.yaml and be included in the main
# play.yaml.

# In this you have to provide a way to verify your domain to letsencrypt

- name: Update TXT record to duckdns.org
  uri:
    url: 'https://www.duckdns.org/update?domains={{ cert_domain }}&token={{ duckdns_org_account_token }}&txt={{ item.value[0] }}&verbose=true&clear=false'
  loop: "{{ query('dict', sample_com_challenge.challenge_data_dns|default({})) }}"

- acme_certificate:
    account_key: "{{ work_dir }}/account.key"
    account_email: "{{ contact_email|default('steve.kieu@au.abb.com') }}"
    acme_version: 2
    terms_agreed: yes
    acme_directory: "{{ acme_directory }}"
    csr: "{{ work_dir }}/{{ cert_domain }}.csr"
    dest: "{{ work_dir }}/{{ cert_domain }}.crt"
    challenge: "{{ letsencrypt_challenge|default('dns-01') }}"
    remaining_days: "{{ remaining_days }}"
    data: "{{ sample_com_challenge }}"

# cert conversion and manipulation. You may store it somewhere for other app to use if the cert is wild cards
- shell: |
    cat {{ cert_domain }}.crt intermediate.pem > chained-{{ cert_domain }}.crt
    if [ ! -f {{ cert_domain }}.key ]; then
      openssl rsa -in {{ cert_domain }}-enc.key -passin pass:'{{ key_passphrase }}' -out {{ cert_domain }}.key
    fi
    # generate java keystore for jenkins to copy over
    openssl pkcs12 -inkey {{ cert_domain }}.key -in chained-{{ cert_domain }}.crt  -export -passout pass:'{{ key_passphrase }}' -out {{ cert_domain }}.pkcs12
    docker run --rm --entrypoint sh -v $(pwd):/work --workdir /work openjdk:15-jdk-alpine3.11 -c  'echo "{{ key_passphrase }}" | keytool -importkeystore -srckeystore {{ cert_domain }}.pkcs12 -srcstoretype pkcs12 -storepass "{{ key_passphrase }}" -destkeystore jenkins.jks -noprompt'
    mv jenkins.jks ../../jenkins.jks

    if [ ! -f {{ cert_domain }}-enc.key ]; then
      openssl rsa -in {{ cert_domain }}.key -out {{ cert_domain }}-enc.key -passout pass:'{{ key_passphrase }}' -des3
      rm -f {{ cert_domain }}.key
    fi
    # this may fail for the first time as we have not build the image yet
    ( cd ../../ && yes | ./build.sh update-cert {{ key_passphrase }} )
  args:
    chdir: "{{ work_dir }}"
  async: 300
  poll: 3
  ignore_errors: yes
